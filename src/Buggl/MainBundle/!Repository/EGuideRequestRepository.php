<?php

namespace Buggl\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * EGuideRequestRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EGuideRequestRepository extends EntityRepository
{
	public function findByLocalAuthor($localauthor,$offset=0,$limit=0)
	{
		$qb=$this->createQueryBuilder("EGuideRequest");

		$qb->select("EGuideRequest");

		if(!is_null($localauthor))
		{
			$qb->where("EGuideRequest.localAuthor = :localauthor")
			   ->setParameter("localauthor",$localauthor);
		}
		   
	    $qb->orderBy("EGuideRequest.dateAdded","DESC");   

		if($limit > 0)
		{   
		   $qb->setFirstResult($offset);
		   $qb->setMaxResults($limit);
		}
		
		$paginator = new Paginator($qb->getQuery(), true);

		return $paginator;
	}

	public function countByRequestedCountry($name)
	{

		$qb=$this->createQueryBuilder("country");
		$qb->select("country")
		   ->where("country.country=:country")
		   ->setParameter("country",$name);

		return $qb->getQuery()->getResult();
	}

	public function countEGuideRequestByStatus($localAuthor, $status)
	{
		$qb = $this->createQueryBuilder('EGuideRequest');
		
		$qb->select('COUNT(EGuideRequest)');
		
		$params = array();
		$whereClause = 'EGuideRequest.localAuthor = :localAuthor';
		$params['localAuthor'] = $localAuthor;
		
		$statusConditions = array();
		foreach($status as $key => $val){
			$statusConditions[] = 'EGuideRequest.status = '.':status_'.$key;
			$params['status_'.$key] = $val;
		}	
		$whereClause .= ' AND ('.implode(' OR ',$statusConditions).')';
		
		$qb->where($whereClause);
		
		foreach($params as $key => $val){
			$qb->setParameter($key,$val);
		}
		
		return $qb->getQuery()->getSingleScalarResult();
	}
	public function findOneById($id)
	{
		$qb=$this->createQueryBuilder("EGuideRequest");

		$qb->select("EGuideRequest");
			$qb->where("EGuideRequest.id = :id")
			   ->setParameter("id",$id);


		return $qb->getQuery()->getSingleResult();
	}


}
