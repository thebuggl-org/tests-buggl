<?php

namespace Buggl\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * ActivityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ActivityRepository extends EntityRepository
{
	public function findByActors($followedUsers,$currentUser,$startDate = null,$endDate = null,$offset=0,$limit=0)
	{
		$qb = $this->createQueryBuilder('activity');
		
		$params = array();
		$receiverCondition = array();
		$params['receiver'] = $currentUser;
		foreach($followedUsers as $key => $user){
			$params['actor_'.$key] = $user;
			$receiverCondition[] = 'activity.actor = :actor_'.$key;
		}
		
		$followedUsersCondition = '';
		if(!empty($receiverCondition))
			$followedUsersCondition = ' OR '.implode(' OR ',$receiverCondition);
		$whereClause = '(activity.receiver = :receiver'.$followedUsersCondition.')';
		if(!is_null($startDate)){
			$params['startDate'] = $startDate;
			$whereClause .= ' AND activity.dateAdded >= :startDate';
		}
		if(!is_null($endDate)){
			$params['endDate'] = $endDate;
			$whereClause .= ' AND activity.dateAdded <= :endDate';
		}
			
		$qb->where($whereClause);
		foreach($params as $key => $val){
			$qb->setParameter($key, $val);
		}
		
		if($limit > 0){
			$qb->setFirstResult($offset);
			$qb->setMaxResults($limit);
		}
		
		$qb->orderBy("activity.dateAdded","DESC");
		
		//return $qb->getQuery()->getResult();
		$paginator = new Paginator($qb->getQuery(), true);
		
		return $paginator;
	}
}
