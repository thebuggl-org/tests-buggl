<?php

namespace Buggl\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use Buggl\MainBundle\Entity\LocalAuthor;
use Buggl\MainBundle\Entity\Spot;
// use Buggl\MainBundle\Entity\EGuide;


// use Doctrine\ORM\Query\ResultSetMapping;
use Doctrine\ORM\Query\ResultSetMappingBuilder;
/**
 * SpotDetailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SpotDetailRepository extends EntityRepository
{
	public function findByIds($ids)
	{
		$qb = $this->createQueryBuilder('spotDetail');
		
        if(!empty($ids)){
            $qb->select('spotDetail')->where($qb->expr()->in('spotDetail.id',$ids));
            return $qb->getQuery()->getResult();    
        }
		
		return array();
	}
	
	
	public function findBySpotAndAuthor($spot,$localAuthor)
	{
		$qb = $this->createQueryBuilder('spotDetail');
		$qb->where("spotDetail.spot = :spot AND spotDetail.localAuthor = :localAuthor");
		$qb->setParameter("spot",$spot);
		$qb->setParameter("localAuthor",$localAuthor);
		
		try{
			return $qb->getQuery()->getSingleResult();
		}catch(\Doctrine\ORM\NoResultException $e) {}
		
		return null;
	}
	
	public function findByGuideAndType( \Buggl\MainBundle\Entity\EGuide $eGuide, $type)
	{
		$qb = $this->createQueryBuilder('spotDetail');
		
		$typeClause = '';
		if(!is_null($type))
			$typeClause = ' AND spotDetail.spotType = :spotType';
		
		$qb->select('spotDetail');
		$qb->leftJoin('spotDetail.spot', 'spot');
		$qb->where("spotDetail.eGuide = :eGuide".$typeClause);
		$qb->setParameter("eGuide",$eGuide);
		if(!is_null($type))
			$qb->setParameter("spotType",$type);
		
		return $qb->getQuery()->getResult();
	}
	
	public function findByAuthorAndType( LocalAuthor $author, $type = null, $limit = 0, $offset = 0, $groupBySpot = false)
	{
		$qb = $this->createQueryBuilder('spotDetail');
		
		$typeClause = '';
		if(!is_null($type))
			$typeClause = ' AND spotDetail.spotType = :spotType';
		
		$qb->select('spotDetail');
		$qb->leftJoin('spotDetail.spot', 'spot');
		$qb->where("spotDetail.localAuthor = :author".$typeClause);
		$qb->setParameter("author",$author);
		if(!is_null($type))
			$qb->setParameter("spotType",$type);
		
		if($limit > 0){	
			$qb->setFirstResult($offset);
			$qb->setMaxResults($limit);
		}
		
		if($groupBySpot)
			$qb->groupBy('spotDetail.spot');

		$paginator = new Paginator($qb->getQuery(), true);
		
		return $paginator;
	}
	
	public function findSpotByLocalAuthor(LocalAuthor $author, $limit = 2, $offset = 0)
    {

		$entityManager = $this->getEntityManager();
		$dql = "SELECT s FROM BugglMainBundle:SpotDetail s WHERE s.localAuthor = :authorId";
		$query = $entityManager->createQuery($dql)
							   ->setParameter("authorId",$author)
		                       ->setFirstResult($offset)
		                       ->setMaxResults($limit);

		// var_dump($query); exit;
		$paginator = new Paginator($query);

		$c = count($paginator);
		// echo $c;
		// foreach ($paginator as $spotDetail) {
		// 	echo 'hoy!';
		//     echo  "title: ". $spotDetail->getTitle() . "<br/>";
		//     echo  "author: ". $spotDetail->getLocalAuthor()->getName() . "<br/>";
		// }
		// exit;
		return $paginator;
    }

    public function getByAuthorAndSpot(LocalAuthor $author, Spot $spot)
    {
    	$entityManager = $this->getEntityManager();
		$dql = "SELECT s FROM BugglMainBundle:SpotDetail s WHERE s.spot = :spotId AND s.localAuthor = :authorId";
		$query = $entityManager->createQuery($dql)
							   ->setParameters(array("spotId" => $spot, "authorId" => $author))
							   ->setMaxResults(1);
		// echo $query->getSQL(); exit;
		return $query->getSingleResult();
    }
	
	/*
		NOTE: double check this
	*/
	public function getOneBySpot(Spot $spot)
	{
		$qb = $this->createQueryBuilder('spotDetail');
		
		$qb->select('spotDetail')
		   ->where('spotDetail.spot = :spot')
		   ->setParameter('spot', $spot);
		
		try{
			return $qb->getQuery()->getSingleResult();
		}catch(\Doctrine\ORM\NoResultException $e) {}
		
		return null;
	}

	public function getAllInLocalSecrets(\Buggl\MainBundle\Entity\EGuide $eGuide, LocalAuthor $author, $daynum = 0)
	{
		$sql = "SELECT sd.* 
					FROM spot_detail sd 
					LEFT JOIN e_guide_to_spot 
						AS egts ON egts.spot_id = sd.spot_id 
					WHERE 1 
						AND sd.local_author_id = ? 
						AND egts.e_guide_id = ?";
						// AND egts.day_num = 0";

		if($daynum > 0)
		{
			$sql = $sql . " AND egts.day_num = ?";
			$params = array($author->getId(), $eGuide->getId(), $daynum);
		}
		else {
			$params = array($author->getId(), $eGuide->getId());
		}
		
		$spotDetails = $this->executeNativeQuery($sql, $params);
		return $spotDetails;
	}

	public function getAllNotInLocalSecrets(\Buggl\MainBundle\Entity\EGuide $eGuide, LocalAuthor $author)
	{
		$sql = "SELECT sd . *
					FROM `spot_detail` AS sd
					WHERE 1
						AND sd.local_author_id = ?
						AND sd.spot_id NOT IN (
							SELECT egts.spot_id
							FROM e_guide_to_spot AS egts
							WHERE egts.e_guide_id = ?
						)";
		
		$spotDetails = $this->executeNativeQuery($sql, array($author->getId(), $eGuide->getId()));
		return $spotDetails;

	}
	
	public function getAllInLocalSecretsByType(\Buggl\MainBundle\Entity\EGuide $eGuide, LocalAuthor $author, $type = null, $daynum = 0, $offset = 0, $limit = 0)
	{
		$typeClause = !is_null($type) ? 'AND sd.spot_type_id = ?' : '';
		$sql = "SELECT sd . *
					FROM `spot_detail` AS sd
					LEFT JOIN e_guide_to_spot_detail 
						AS egtsd ON egtsd.spot_detail_id = sd.id
					WHERE 1
						AND egtsd.e_guide_id = ?
						$typeClause";

		if($daynum > 0)
		{
			$sql = $sql . " AND egtsd.day_num = ?";
			$params = array($eGuide->getId(), $daynum);
		}
		else {
			$params = array($eGuide->getId());
		}
		
		if(!is_null($type)){
			$params = array_merge($params,array($type->getId()));
		}
		
		if($limit > 0){
			$sql .= " LIMIT ?,?";
			$params = array_merge($params,array($offset,$limit));
		}
		
		$spotDetails = $this->executeNativeQuery($sql, $params);
		return $spotDetails;
	}
	
	public function getAllNotInLocalSecretsByType(\Buggl\MainBundle\Entity\EGuide $eGuide, LocalAuthor $author, $type, $offset = 0, $limit = 0)
	{
		$typeClause = !is_null($type) ? 'AND sd.spot_type_id = ?' : '';
		$sql = "SELECT sd . *
					FROM `spot_detail` AS sd
					WHERE 1
						AND sd.local_author_id = ?
						AND sd.id NOT IN (
							SELECT egts.spot_detail_id
							FROM e_guide_to_spot_detail AS egts
							WHERE egts.e_guide_id = ?
						)
						$typeClause";
		// echo $sql;
		$params = array($author->getId(), $eGuide->getId());
		if(!is_null($type)){
			$params = array_merge($params,array($type->getId()));
		}
		
		if($limit > 0){
			$sql .= " LIMIT ?,?";
			$params = array_merge($params,array($offset,$limit));
		}
		
		$spotDetails = $this->executeNativeQuery($sql, $params);
		return $spotDetails;
	}

	private function executeNativeQuery($sql, $params)
	{
		$em = $this->getEntityManager();
		$rsm = new ResultSetMappingBuilder($em);
		$rsm->addRootEntityFromClassMetadata('BugglMainBundle:SpotDetail', 'sd');
		$query = $em->createNativeQuery($sql, $rsm);
		$query->setParameters($params);
		$spotDetails = $query->getResult();
		return $spotDetails;
	}

	public function getDetailsByType()
	{
		$em = $this->getEntityManager();
		$rsm = new ResultSetMappingBuilder($em);
		$rsm->addRootEntityFromClassMetadata('BugglMainBundle:SpotDetail', 'sd');
		
		$sql = "SELECT sd.* FROM spot_detail sd LEFT JOIN e_guide_to_spot AS egts ON egts.spot_id = sd.spot_id WHERE sd.local_author_id = ? AND egts.e_guide_id = ?";
		$query = $em->createNativeQuery($sql, $rsm);
		$query->setParameters(array(5, 45));
		// $query->setParameter(1, 34);

		$spotDetails = $query->getResult();
		// var_dump($spotDetails[0]->getLocalAuthor()->getName());
		var_dump(count($spotDetails));
		// echo $spotDetails->getId();

	}

	public function getByItinerary(\Buggl\MainBundle\Entity\Itinerary $itinerary = null)
	{
		$em = $this->getEntityManager();
		$rsm = new ResultSetMappingBuilder($em);
		$rsm->addRootEntityFromClassMetadata('BugglMainBundle:SpotDetail', 'sd');
		
		$sql = "SELECT sd.* FROM spot_detail AS sd 
					LEFT JOIN itinerary_to_spot_detail AS itsd 
					ON itsd.spot_detail_id = sd.id 
				WHERE 1
					AND itsd.itinerary_id = ?
				ORDER BY itsd.period_of_day, itsd.`order` ASC";
		$query = $em->createNativeQuery($sql, $rsm);
		$query->setParameters(array($itinerary->getID()));
		// $query->setParameter(1, 34);

		$spotDetails = $query->getResult();
		return $spotDetails;
	}
}
 