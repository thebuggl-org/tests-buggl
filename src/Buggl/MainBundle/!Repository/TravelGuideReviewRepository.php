<?php

namespace Buggl\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * TravelGuideReviewRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class TravelGuideReviewRepository extends EntityRepository
{
    public function findAllReviewByTravelGuide($travelGuide,$status)
    {
        $qb = $this->createQueryBuilder('travelguidereview');

        $qb->select('travelguidereview')
           ->where('travelguidereview.eguide = :travelguide AND travelguidereview.status = :status')
           ->setParameter('travelguide',$travelGuide)
           ->setParameter('status',$status);

        return $qb->getQuery()->getResult();
    }

    public function countReviewsFilteredByLocalAuthor($localAuthor,$status)
    {
        $qb = $this->createQueryBuilder('travelguidereview');

        $qb->select('count(travelguidereview.id)')
           ->leftJoin('travelguidereview.eguide','eguide')
           ->where('eguide.localAuthor = :localAuthor AND travelguidereview.status = :status')
           ->setParameter('localAuthor',$localAuthor)
           ->setParameter('status',$status);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function findAllReviewByLocalAuthor($localAuthor,$status,$offset = 0,$limit = 0)
    {
        $qb = $this->createQueryBuilder('travelguidereview');

        $qb->select('travelguidereview')
           ->leftJoin('travelguidereview.eguide','eguide')
           ->leftJoin('eguide.localAuthor','localAuthor')
           ->where('travelguidereview.status = :status AND localAuthor = :localAuthor')
           ->setParameter('localAuthor',$localAuthor)
           ->setParameter('status',$status)
           ->orderBy('travelguidereview.dateAdded','DESC');

        if($limit > 0){
            $qb->setFirstResult($offset);
            $qb->setMaxResults($limit);
        }

        $paginator = new Paginator($qb->getQuery(), true);
        return $paginator;
    }

    // means average;
    public function getOverallRating( $eguide, $status = 1 )
    {
        $qb = $this->createQueryBuilder('review');

        $qb->select("AVG(review.rating)")
           ->leftJoin("review.eguide","eguide")
           ->where("eguide.id = :id AND review.status = :status")
           ->groupBy("review.eguide")
           ->setParameter('id',$eguide->getId())
           ->setParameter('status', $status);

        try{
            $rating = $qb->getQuery()->getSingleScalarResult();
        }catch(\Doctrine\ORM\NoResultException $e){
            $rating = 0;
        }

        return $rating;
    }
}
