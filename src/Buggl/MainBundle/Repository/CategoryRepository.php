<?php

namespace Buggl\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{

    const ADDED_CATEGORY = 0;
	
	public function findAll()
	{
		$qb = $this->createQueryBuilder("category");
		
		$qb->select("category")
		   ->orderBy("category.name","ASC");
		
		return $qb->getQuery()->getResult();
	}

    public function findByStatus($status)
    {
        $qb = $this->createQueryBuilder("category");

        $qb->select("category")
           ->where("category.isPublished = :status")
           ->orderBy("category.name","ASC")
           ->setParameter("status",$status);

        return $qb->getQuery()->getResult();
    }

    public function findByStatusOrderByName($status, $asc = true)
    {
        $qb = $this->createQueryBuilder("category");

        $qb->select("category")
           ->where("category.isPublished = :status");

        if($asc){
           $qb->orderBy("category.name","ASC");
        }
        else{
            $qb->orderBy("category.name","DESC");
        }

        $qb->setParameter("status",$status);

        return $qb->getQuery()->getResult();
    }

    public function findCustomAdded()
    {
        $qb = $this->createQueryBuilder("category");

        $qb->select("category")
           ->where("category.isDefault = :isDefault")
           ->setParameter("isDefault", self::ADDED_CATEGORY );

        return $qb->getQuery()->getResult();
    }

    public function findAllCategory(){
        $qb = $this->createQueryBuilder("category");

        $qb->select("category")
           ->orderBy('category.name','ASC');

        return $qb->getQuery()->getResult();
    }

    public function searchByName($name = "")
    {
        $qb = $this->createQueryBuilder("category");

        $qb->select("category")
           ->where("category.name LIKE :name")
           ->setParameter("name", "%".$name."%");

        return $qb->getQuery()->getResult();
    }

    public function suggestActivity($qString, $status)
    {
        $qb = $this->createQueryBuilder('activity');

        $qb->select('activity.name')
           ->distinct('activity.name')
           ->where('activity.isPublished = :status')
           ->andWhere('activity.name LIKE :string')
           ->setParameter('string','%'.$qString.'%')
           ->setParameter('status', $status);

        return $qb->getQuery()->getResult();
    }
}
