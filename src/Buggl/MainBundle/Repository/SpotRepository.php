<?php

namespace Buggl\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

use Doctrine\ORM\Query\ResultSetMappingBuilder;
/**
 * SpotRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SpotRepository extends EntityRepository
{
    // used in admin searching by country, type with limit
	public function searchSpot( $country, $type, $limit=0, $page=1 )
    {
        $qb = $this->createQueryBuilder('spot');

        $qb->select('spot');

        if($country){
            $qb->leftJoin('spot.city','city')
               ->leftJoin('city.country','country')
               ->andWhere('country.id = :country')
               ->setParameter('country',$country);
        }

        if( $type > 0 ){
            $qb->innerJoin('BugglMainBundle:SpotDetail','spotDetail','WITH','spotDetail.spot = spot')
               ->leftJoin('spotDetail.spotType','type')
               ->andWhere('type.id = :type')
               ->setParameter('type',$type);
        }

        if($limit > 0){
            $offset = ($page-1)*$limit;

            $qb->setMaxResults($limit)
                ->setFirstResult($offset);
        }

        // $paginator = new Paginator($qb->getQuery(),true);

        // return $paginator;
        return $qb->getQuery()->getResult();
    }

    public function countSpot( $country, $type )
    {
        $qb = $this->createQueryBuilder('spot');

        $qb->select('count(spot.id)');

        if($country){
            $qb->leftJoin('spot.city','city')
               ->leftJoin('city.country','country')
               ->andWhere('country.id = :country')
               ->setParameter('country',$country);
        }

        if( $type > 0 ){
            $qb->innerJoin('BugglMainBundle:SpotDetail','spotDetail','WITH','spotDetail.spot = spot')
               ->leftJoin('spotDetail.spotType','type')
               ->andWhere('type.id = :type')
               ->setParameter('type',$type);
        }

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function checkPossibleDuplicate($name, $address)
    {
        $entityManager = $this->getEntityManager();
        $dql = "SELECT s FROM BugglMainBundle:Spot s WHERE 1 AND s.spot = :spotId AND s.localAuthor = :authorId";
        $query = $entityManager->createQuery($dql)
                               ->setParameters(array("spotId" => $spot, "authorId" => $author))
                               ->setMaxResults(1);
        // echo $query->getSQL(); exit;
        return $query->getResult();
    }
}
