<?php

namespace Buggl\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * BetaInviteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BetaInviteRepository extends EntityRepository
{
	public function retrieveInvitesByStatus($status,$offset=0,$limit=0)
	{
		$qb = $this->createQueryBuilder('betaInvite');

		$qb->where('betaInvite.status = :status');
		$qb->setParameter('status', $status);

		if($limit > 0){
			$qb->setFirstResult($offset);
			$qb->setMaxResults($limit);
		}

		$qb->orderBy("betaInvite.dateInvited","DESC");

		$paginator = new Paginator($qb->getQuery(), true);

		return $paginator;
	}

	public function retrieveInvitesOfUserByStatus($status,$user,$offset=0,$limit=0)
	{
		$qb = $this->createQueryBuilder('betaInvite');

		$qb->where('betaInvite.status = :status AND betaInvite.sender = :user');
		$qb->setParameter('status', $status);
		$qb->setParameter('user', $user);

		if($limit > 0){
			$qb->setFirstResult($offset);
			$qb->setMaxResults($limit);
		}

		$qb->orderBy("betaInvite.dateInvited","DESC");

		$paginator = new Paginator($qb->getQuery(), true);

		return $paginator;
	}

	public function retrieveNonExpiredByEmailAndToken($email,$token)
	{
		$qb = $this->createQueryBuilder('betaInvite');
		$qb->where('betaInvite.status = :status AND betaInvite.email = :emailAddress AND betaInvite.token = :token AND betaInvite.tokenExpiration > :today');
		$qb->setParameter('status', 0);
		$qb->setParameter('emailAddress', $email);
		$qb->setParameter('token', $token);
		$qb->setParameter('today', date('Y-m-d H:i:s'));

		try{
			return $qb->getQuery()->getSingleResult();
		}catch(\Doctrine\ORM\NoResultException $e) {}

		return null;
	}
	
	public function retrieveByEmailAndToken($email,$token)
	{
		$qb = $this->createQueryBuilder('betaInvite');
		$qb->where('betaInvite.email = :emailAddress AND betaInvite.token = :token');
		$qb->setParameter('emailAddress', $email);
		$qb->setParameter('token', $token);

		try{
			return $qb->getQuery()->getSingleResult();
		}catch(\Doctrine\ORM\NoResultException $e) {}

		return null;
	}

	public function countEmailAndToken($email,$token)
	{
		$qb = $this->createQueryBuilder('betaInvite');

		$qb->select('count(betaInvite.id)')
		   ->where('betaInvite.email = :email AND betaInvite.token = :token')
		   ->setParameter('email',$email)
		   ->setParameter('token',$token);

		return $qb->getQuery()->getSingleScalarResult();
	}
}
