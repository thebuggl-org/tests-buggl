<?php

namespace Buggl\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * MessageThreadToUserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageThreadToUserRepository extends EntityRepository
{
	
	public function findByUser( $user, $status, $offset = 0, $limit = 0 )
	{
		$qb = $this->createQueryBuilder('messageThreadToUser');
		
		$qb->select('messageThreadToUser');
		$qb->leftJoin('messageThreadToUser.thread','thread');
		//$qb->leftJoin('messageThreadToUser.thread','messageToUser');

		$params = array();
		$whereClause = "messageThreadToUser.user = :user And thread.messagetypes !='eguiderequest'";
		$params['user'] = $user;
		
		$statusConditions = array();
		foreach($status as $key => $val){
			$statusConditions[] = 'messageThreadToUser.status = :status_'.$key;
			$params['status_'.$key] = $val;
		}	
		$whereClause .= ' AND ('.implode(' OR ',$statusConditions).')';
		
		$qb->where($whereClause);
		
		foreach($params as $key => $val){
			$qb->setParameter($key,$val);
		}
		
		$qb->orderBy("thread.dateUpdated","DESC");
		
		if($limit > 0){	
			$qb->setFirstResult($offset);
			$qb->setMaxResults($limit);
		}
		 //echo $qb;die;
		$paginator = new Paginator($qb->getQuery(), true);
		 
		return $paginator;
	}
	
	public function findbyThread($thread)
	{	//echo $thread; die;
		$qb = $this->createQueryBuilder('messageThreadToUser');
		
		$qb->select('messageThreadToUser');
		
		$qb->where("messageThreadToUser.thread = :thread");
		$qb->setParameter('thread',$thread);
		
		return $qb->getQuery()->getResult();
	}

	public function findOneByThread($thread,$userId)
	{	//echo $thread; die;
		$qb = $this->createQueryBuilder('messageThreadToUser');
		
		$qb->select('messageThreadToUser');
		
		$qb->where("messageThreadToUser.thread = :thread AND messageThreadToUser.user !=".$userId);

		$qb->setParameter('thread',$thread);
		//print_r($qb->getQuery()->getResult()); die;
		return $qb->getQuery()->getResult();
	}

	public function findByUserRequest( $user, $status, $offset = 0, $limit = 0 )
	{
		$qb = $this->createQueryBuilder('messageThreadToUser');
		
		$qb->select('messageThreadToUser');
		$qb->leftJoin('messageThreadToUser.thread','thread');
		//$qb->leftJoin('messageThreadToUser.thread','messageToUser');

		$params = array();
		$whereClause = "messageThreadToUser.user = :user And thread.messagetypes ='eguiderequest'";
		$params['user'] = $user;
		
		$statusConditions = array();
		foreach($status as $key => $val){
			$statusConditions[] = 'messageThreadToUser.status = :status_'.$key;
			$params['status_'.$key] = $val;
		}	
		$whereClause .= ' AND ('.implode(' OR ',$statusConditions).')';
		
		$qb->where($whereClause);
		
		foreach($params as $key => $val){
			$qb->setParameter($key,$val);
		}
		
		$qb->orderBy("thread.dateUpdated","DESC");
		
		if($limit > 0){	
			$qb->setFirstResult($offset);
			$qb->setMaxResults($limit);
		}
		 //echo $qb;die;
		$paginator = new Paginator($qb->getQuery(), true);
		 
		return $paginator;
	}
}