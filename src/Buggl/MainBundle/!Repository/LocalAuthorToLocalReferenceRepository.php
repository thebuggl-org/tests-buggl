<?php

namespace Buggl\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

use Buggl\MainBundle\Entity\LocalAuthorToLocalReference;

/**
 * LocalAuthorToLocalReferenceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LocalAuthorToLocalReferenceRepository extends EntityRepository
{
	
	public function retrieveOneByLocalAuthorAndEmail($localAuthor, $email, $excludeExpired = false, $returnNewIfNull = false)
	{
		$qb = $this->createQueryBuilder('localAuthorToLocalReference');

		$whereClause = 'localReference.referenceEmail = :email AND localAuthorToLocalReference.localAuthor = :localAuthor';
		$params = array();
		$params['localAuthor'] = $localAuthor;
		$params['email'] = $email;
		
		if($excludeExpired){
			$whereClause .= ' AND localAuthorToLocalReference.tokenExpiration > :today';
			$params['today'] = date('Y-m-d H:i:s');
		}
		
		$qb->select('localAuthorToLocalReference');
		$qb->leftJoin('localAuthorToLocalReference.localReference', 'localReference');
		$qb->where($whereClause);
		foreach($params as $key => $val){
			$qb->setParameter($key,$val);
		}
		
		try{
			$result = $qb->getQuery()->getSingleResult();
		}catch(\Doctrine\ORM\NoResultException $e) {
			$result = $returnNewIfNull ? new LocalAuthorToLocalReference() : null;
		}
		
		return $result;
	}
	
	public function retrieveRequestsByStatus($status, $localAuthor = null, $excludeExpired = false, $offset = 0, $limit = 0 )
	{
		$qb = $this->createQueryBuilder('localAuthorToLocalReference');
		
		$qb->select('localAuthorToLocalReference');
		$qb->leftJoin('localAuthorToLocalReference.localReference', 'localReference');
		
		$params = array();
		$whereClause = '';
		$orderClause = 'localAuthorToLocalReference.id';
		
		if(is_array($status)){
			$statusConditions = array();
			foreach($status as $key => $val){
				$statusConditions[] = 'localAuthorToLocalReference.status = '.':status_'.$key;
				$params['status_'.$key] = $val;
			}	
			$whereClause .= '('.implode(' OR ',$statusConditions).')';
		}
		else{
			$whereClause .= 'localAuthorToLocalReference.status = :status';
			$params['status'] = $status;
		}
		
		if($excludeExpired && $status != 2){
			$whereClause .= ' AND localAuthorToLocalReference.tokenExpiration >  :today';
			$params['today'] = date('Y-m-d H:i:s');
		}
		
		if(!is_null($localAuthor)){
			$whereClause .= ' AND localAuthorToLocalReference.localAuthor = :localAuthor';
			$params['localAuthor'] = $localAuthor;
			$orderClause = 'localReference.dateUpdated';
		}
		
		$qb->where($whereClause);
		
		foreach($params as $key => $val){
			$qb->setParameter($key,$val);
		}
		
		if(!is_null($localAuthor)){
			$qb->addOrderBy($orderClause);
		}
		
		if($limit > 0){	
			$qb->orderBy("localReference.dateUpdated","DESC");
			$qb->addOrderBy("localReference.referenceEmail","ASC");
			$qb->setFirstResult($offset);
			$qb->setMaxResults($limit);
		}
		
		$paginator = new Paginator($qb->getQuery(), true);
		
		return $paginator; //return $qb->getQuery()->getResult();
	}
	
	public function countRequestsByStatus($status, $localAuthor = null, $excludeExpired = true)
	{
		$qb = $this->createQueryBuilder('localAuthorToLocalReference');
		
		$qb->select('COUNT(localAuthorToLocalReference)');
		$qb->leftJoin('localAuthorToLocalReference.localReference', 'localReference');
		
		$params = array();
		$whereClause = '';
		$orderClause = 'localAuthorToLocalReference.id';
		
		if(is_array($status)){
			$statusConditions = array();
			foreach($status as $key => $val){
				$statusConditions[] = 'localAuthorToLocalReference.status = '.':status_'.$key;
				$params['status_'.$key] = $val;
			}	
			$whereClause .= '('.implode(' OR ',$statusConditions).')';
		}
		else{
			$whereClause .= 'localAuthorToLocalReference.status = :status';
			$params['status'] = $status;
		}
		
		if($excludeExpired && $status != 2){
			$whereClause .= ' AND localAuthorToLocalReference.tokenExpiration >=  :today';
			$params['today'] = date('Y-m-d H:i:s');
		}
		
		if(!is_null($localAuthor)){
			$whereClause .= ' AND localAuthorToLocalReference.localAuthor = :localAuthor';
			$params['localAuthor'] = $localAuthor;
			$orderClause = 'localReference.dateUpdated';
		}
		
		$qb->where($whereClause);
		
		foreach($params as $key => $val){
			$qb->setParameter($key,$val);
		}
		
		if(!is_null($localAuthor)){
			$qb->addOrderBy($orderClause);
		}
		
		return $qb->getQuery()->getSingleScalarResult();
	}
	
	public function retrieveOneByLocalReference($localReference)
	{
		$qb = $this->createQueryBuilder('localAuthorToLocalReference');
		
		$qb->select('localAuthorToLocalReference');
		$qb->where("localAuthorToLocalReference.localReference = :localReference");
		$qb->setParameter("localReference",$localReference);
		
		try{
			$result = $qb->getQuery()->getSingleResult();
		}catch(\Doctrine\ORM\NoResultException $e) {
			$result = null;
		}
		
		return $result;
	}
	
	public function retrieveOneUnresponded()
	{
		$qb = $this->createQueryBuilder('localAuthorToLocalReference');
		
		$qb->select('localAuthorToLocalReference');
		$qb->where("localAuthorToLocalReference.status < :status AND localAuthorToLocalReference.tokenExpiration <  :today");
		$qb->setParameter('status',2);
		$qb->setParameter('today',date('Y-m-d H:i:s'));
		
		$qb->setFirstResult(0);
		$qb->setMaxResults(1);
		
		try{
			$result = $qb->getQuery()->getSingleResult();
		}catch(\Doctrine\ORM\NoResultException $e) {
			$result = null;
		}
		
		return $result;
	}
	
	public function retrieveAllFeatureByLocalAuthor($localAuthor, $offset=0, $limit=0)
	{
		$qb = $this->createQueryBuilder('localAuthorToLocalReference');
		
		$qb->select('localAuthorToLocalReference');
		$qb->leftJoin('localAuthorToLocalReference.localReference', 'localReference');
		$qb->where("localAuthorToLocalReference.localAuthor = :localAuthor AND localAuthorToLocalReference.status = :status AND localReference.isFeatured = :isFeatured");
		$qb->setParameter('localAuthor',$localAuthor);
		$qb->setParameter('status',2);
		$qb->setParameter('isFeatured',1);
		
		if($limit > 0){	
			$qb->orderBy("localReference.dateUpdated","DESC");
			$qb->addOrderBy("localReference.referenceEmail","ASC");
			$qb->setFirstResult($offset);
			$qb->setMaxResults($limit);
		}
		
		$paginator = new Paginator($qb->getQuery(), true);
		
		return $paginator;
	}
	
	public function countAllFeatureByLocalAuthor($localAuthor)
	{
		$qb = $this->createQueryBuilder('localAuthorToLocalReference');
		
		$qb->select('COUNT(localAuthorToLocalReference)');
		$qb->leftJoin('localAuthorToLocalReference.localReference', 'localReference');
		$qb->where("localAuthorToLocalReference.localAuthor = :localAuthor AND localAuthorToLocalReference.status = :status AND localReference.isFeatured = :isFeatured");
		$qb->setParameter('localAuthor',$localAuthor);
		$qb->setParameter('status',2);
		$qb->setParameter('isFeatured',1);
		
		try{
			$result = $qb->getQuery()->getSingleScalarResult();
		}catch(\Doctrine\ORM\NoResultException $e) {
			$result = 0;
		}
		
		return $result;
	}
}
