<?php

namespace Buggl\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;

use Doctrine\ORM\Query\ResultSetMappingBuilder;

/**
 * ItineraryToSpotDetailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ItineraryToSpotDetailRepository extends EntityRepository
{
	public function getLastOrderByItineraryAndPeriodOfDay(\Buggl\MainBundle\Entity\Itinerary $itinerary, $periodOfDay = 0)
	{
		$sql = "SELECT itsd.* 
					FROM itinerary_to_spot_detail itsd
					WHERE 1
						AND itsd.itinerary_id = ?
						AND itsd.period_of_day = ?
						ORDER BY itsd.order DESC
						LIMIT 0, 1";
		$params = array($itinerary->getID(), $periodOfDay);
		$em = $this->getEntityManager();
		$rsm = new ResultSetMappingBuilder($em);
		$rsm->addRootEntityFromClassMetadata('BugglMainBundle:ItineraryToSpotDetail', 'itsd');
		$query = $this->_em->createNativeQuery($sql, $rsm);
		$query->setParameters($params);
		try {
			$result = $query->getResult();
		} catch(\Doctrine\ORM\NoResultException $e){
			return null;
		}
		return $result;
	}

	public function getByItinerary(\Buggl\MainBundle\Entity\Itinerary $itinerary, $period_of_day = 0, $limit = 0, $offset = 0 )
	{
		$sql = "SELECT itsd.*  
					FROM itinerary_to_spot_detail itsd
					WHERE 1
						AND itsd.itinerary_id = ?
						AND itsd.period_of_day = ?
					";
		if($limit > 0)
		{
			$sql .= "LIMIT ?, ?";
			$params = array(
				$itinerary->getId(),
				$period_of_day,
				$offset,
				$limit
			);
		}
		else {
			$params = array(
				$itinerary->getId(),
				$period_of_day
			);
		}
			
		
		$em = $this->getEntityManager();
		$rsm = new ResultSetMappingBuilder($em);
		$rsm->addRootEntityFromClassMetadata('BugglMainBundle:ItineraryToSpotDetail', 'itsd');
		$query = $this->_em->createNativeQuery($sql, $rsm);
		$query->setParameters($params);
		$result = $query->getResult();
		return $result;
	}
	
	public function findByItinerary(\Buggl\MainBundle\Entity\Itinerary $itinerary)
	{
		$qb = $this->createQueryBuilder('itineraryToSpotDetail');
		
		$qb->select('itineraryToSpotDetail');
		$qb->where("itineraryToSpotDetail.itinerary = :itinerary");
		$qb->setParameter("itinerary",$itinerary);
		
		return $qb->getQuery()->getResult();
	}

	public function findByGuideAndSpotDetail(\Buggl\MainBundle\Entity\EGuide $eguide, \Buggl\MainBundle\Entity\SpotDetail $spotDetail)
	{
		$sql = "SELECT itsd.*  
					FROM itinerary_to_spot_detail itsd
					LEFT JOIN itinerary it
						ON itsd.itinerary_id = it.id
					LEFT JOIN e_guide eg
						ON it.e_guide_id = eg.id
					WHERE 1
						AND it.e_guide_id = ?
						AND itsd.spot_detail_id = ?
					";
		$params = array(
				$eguide->getId(),
				$spotDetail->getID()
			);

		$em = $this->getEntityManager();
		$rsm = new ResultSetMappingBuilder($em);
		$rsm->addRootEntityFromClassMetadata('BugglMainBundle:ItineraryToSpotDetail', 'itsd');
		$query = $this->_em->createNativeQuery($sql, $rsm);
		$query->setParameters($params);
		$result = $query->getResult();
		return $result;
	}
}
