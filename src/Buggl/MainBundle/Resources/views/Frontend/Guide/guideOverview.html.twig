{% extends "BugglMainBundle:Frontend/Guide:guideLayout.html.twig" %}

{% set activeTab = 'overview' %}

{% block meta_tags %}
    <meta name="description" content="{{ metas.description|raw }}">
{% endblock %}

{% block guidePageContent %}
    <article class="column grid_8">
        <section class="overview-cover">
        	<div class="half cover" style="background-image: url('{{ guide | getEguidePhoto }}');">
				<h1 name="popup-edit" data-fieldname="title" data-content="ffd" style="font-size:{{ guide.plainTitle|length > 40 ? '48' : '60' }}px">{{ guide.title | raw }}</h1>
				<div class="cover-teaser" name="popup-edit" data-fieldname="excerpts" data-content="&lt;p&gt;dfsfsd&lt;/p&gt;">
					<p>{{ guide.excerpts | raw }}</p>
				</div>
			</div>

        	<div class="sidebar-price">
                {% if okToRender %}
                    {% if purchased %}
			
                        <span>Purchased</span>
			
                  {%if(guide.status==10)%}
			<a href="{{ path('eguide_publish', {'guide':'guide','id':guide.id,'status':'publish'}) }}" >
			<span>Published</span></a>
			{% endif %}

		   {%if(guide.isRequestId !=0 )%}
		   {%if(guide.status == 2)%}
			<a href="{{ path('eguide_publish', {'guide':'guide','id':guide.id,'status':'private'}) }}" >
			<span>private</span></a>
			{% endif %}
			{% endif %}
		
                    {% elseif ownGuide %}
                        <span>Owned</span>
                    {% else %}
                        <span>{{ guide.price | renderPrice }}</span>
                    {% endif %}
                {% else %}
                    <span>{{ guide.price | renderPrice }}</span>
                {% endif %}
        	</div>
        	<div>
        		<h3>Pages</h3>
        		<p>{{ guide.pdfPageCount }}</p>
        	</div>
        	<div>
        		<h3>Updated</h3>
        		<p>{{ guide.dateUpdated | convertDateTime('M j, Y') }}</p>
        	</div>
            {% if guide.getPurchaseCount > 0 %}
            <div>
                <h3>Purchases</h3>
                <p>{{ guide.getPurchaseCount }}</p>
            </div>
            {% endif %}
			{% if rating > 0 %}
                <div>
                    <h3>Review{{ reviewCount > 1 ? 's' : '' }}</h3>
                    <p>{{ reviewCount }}</p>
                </div>

            	<div>
	        		<h3>Rating</h3>
	                <ul class="rating">
						<li class="star fl">
	                        {% for i in 1..rating %}
	                            <span class="ico"></span>
	                        {% endfor %}
						</li>
				    </ul>
             	</div>
            {% endif %}
        </section>
        <section>
           	<h3>About the Guidebook</h3>
           	<p>{{ guide.overviewIntro | raw }}</p>
           	<h4>Local Knowledge &amp; Cool Perks</h4>
			<br/>
			{% set localPerk = (localPerks|length > 0) ? localPerks[0] : null %}
			{% if localPerk is not null %}
				{{ localPerk.content | raw }}
			{% endif %}
			{% if guide.localAuthor.profile is not null %}
                <h4>About the Author</h4>
				<br/>
                <p>{{ guide.localAuthor.profile.aboutYou }}</p>
			{% endif %}
        </section>
		{% include 'BugglMainBundle:Frontend/Guide:ratingSection.html.twig'  with {guide:guide} %}
    </article>

{#
<script src="{{ asset('bundles/bugglmain/js/jquery-1.8.2.min.js') }}"></script>
<script src="{{ asset('bundles/bugglmain/js/tiny_mce/jquery.tinymce.js' | s3Cdn) }}"></script>
<script src="{{ asset('bundles/bugglmain/js/eguide_themes/default/jquery.googleCustomSearch.v1.0.js' | s3Cdn) }}"></script>
<script src="{{ asset('bundles/bugglmain/js/eguide_themes/default/jquery.eguide.v1.1.js' | s3Cdn) }}"></script>
<script type='text/javascript' src='http://d3js.org/d3.v3.min.js'></script> 
<script src="{{ asset('bundles/bugglmain/js/eguide_themes/default/eguidereq.js') }}"></script>
 <script>
$(function() {

 var nb_sliders = null; // nb of range sliders
var moving_id = null; // id of the moved slider
var oldValue = []; // previous values of the sliders

var radius = 150; // pie chart radius
var color = d3.scale.category20(); // color scheme (10, 20, 20b, 20c ...)
var pi = Math.PI; // 3.14

// pie chart config
var pie = d3.layout.pie()
    .value(function (d) {
    return d.value;
})
//.startAngle(-90 * (pi/180))
//.endAngle(90 * (pi/180))
.sort(null);

// arc object
var arc = d3.svg.arc()
    .outerRadius(radius)
    .innerRadius(radius / 2);

// nb sliders event
d3.select('#nbFormSubmit').on('click', function () {
    d3.event.preventDefault();
   
});
 nb_sliders = d3.select('#nbSliders')[0][0].value;
    init();
// initialize the sliders, events and pie chart
function init() {
    oldValue = [];
    moving_id = null;

    d3.select('#rangebox tbody').html('');

    // append sliders to table
    for (i = 0; i < nb_sliders; i++) {
        var tr = d3.select('#rangebox tbody').append('tr');
    if(i==0){
        tr.append('td')
            .attr('class', 'edit')
            .attr('contenteditable', false)
            .text('Food ');
        tr.append('td')
            .append('input')
            .attr('type', 'range')
            .attr('data-id', i)
            .attr('class', 'range '+'Food-color')
            .attr('step', 1)
            .attr('min', 0)
            //.attr('value', 1)
            .attr('max', 100);
           
        tr.append('td')
            .attr('id', 'range_value1')
            .attr('class', 'range_value1');
    }
    if(i==1){
        tr.append('td')
            .attr('class', 'edit')
            .attr('contenteditable', false)
            .text('Drinking ');
        tr.append('td')
            .append('input')
            .attr('type', 'range')
            .attr('data-id', i)
            .attr('class', 'range '+'Drinking-color')
            .attr('step', 1)
            .attr('min', 0)
            .attr('max', 100);
        tr.append('td')
            .attr('id', 'range_value2')
            .attr('class', 'range_value2');
    }
    if(i==2){
        tr.append('td')
            .attr('class', 'edit')
            .attr('contenteditable', false)
            .text('Shopping ');
        tr.append('td')
            .append('input')
            .attr('type', 'range')
            .attr('data-id', i)
            .attr('class', 'range '+'Shopping-color')
            .attr('step', 1)
            .attr('min', 0)
            .attr('max', 100);
        tr.append('td')
            .attr('id', 'range_value3')
            .attr('class', 'range_value3');
    }
    if(i==3){
        tr.append('td')
            .attr('class', 'edit')
            .attr('contenteditable', false)
            .text('Activities ');
        tr.append('td')
            .append('input')
            .attr('type', 'range')
            .attr('data-id', i)
            .attr('class', 'range '+'Activities-color')
            .attr('step', 1)
            .attr('min', 0)
            .attr('max', 100);
        tr.append('td')
             .attr('id', 'range_value4')
            .attr('class', 'range_value4');
    }
    if(i==4){
        tr.append('td')
            .attr('class', 'edit')
            .attr('contenteditable', false)
            .text('Hotels ');
        tr.append('td')
            .append('input')
            .attr('type', 'range')
            .attr('data-id', i)
            .attr('class', 'range '+'Hotels-color')
            .attr('step', 1)
            .attr('min', 0)
            .attr('max', 100);
        tr.append('td')
            .attr('id', 'range_value5')
            .attr('class', 'range_value5');
    }
    if(i==5){
        tr.append('td')
            .attr('class', 'edit')
            .attr('contenteditable', false)
            .text('Special Touches ');
        tr.append('td')
            .append('input')
            .attr('type', 'range')
            .attr('data-id', i)
            .attr('class', 'range '+'Touches-color')
            .attr('step', 1)
            .attr('min', 0)
            .attr('max', 100);
        tr.append('td')
            .attr('id', 'range_value6')
            .attr('class', 'range_value6');
    }
    }
    d3.selectAll('#rangebox .range').each(function () {
        var def = parseInt(100 / nb_sliders);
        this.value = def;
        oldValue[d3.select(this).attr('data-id')] = this.value;
    });

    equalize();
    showValues();
    pieChart();

    // content edit event
    d3.selectAll('.edit').on('input', function () {
        updateLabels();
    });

    // slider event
    d3.selectAll('.range').on('change', function () {
        this.value = parseInt(this.value);
        if (this.value < 0) this.value = 0;
        else if (this.value > 100) this.value = 100;

        var id = d3.select(this).attr('data-id');
        moving_id = id;

        var old_value = oldValue[moving_id];
        var new_value = this.value;
        var delta = (new_value - old_value) / (nb_sliders - 1);

        d3.selectAll('#rangebox .range').each(function () {
            var r_id = d3.select(this).attr('data-id');
            var r_val = this.value;
            if (r_id != moving_id && r_val > delta) {
                var equalized = parseInt(r_val - delta);
                this.value = equalized;
                oldValue[r_id] = this.value;
            }
        });

        oldValue[moving_id] = new_value;

        equalize();
        showValues();
        updatePieChart();
    });
}

// get JSON data from sliders
function getData() {
    var json = [];
    d3.selectAll('#rangebox .range').each(function () {

        json.push({
            label: d3.select(this.parentNode.parentNode)
                .select('td:first-child')
                .text(),
            value: this.value
        });
    });
    return json;
}

// compute total percentage from sliders
function getTotal() {
    var total = 0;
    d3.selectAll('#rangebox .range').each(function () {
        total = total + parseInt(this.value);
    });
    return total;
}

// equalize the sliders (decimal delta)
function equalize() {
    var remaining = 100 - getTotal();

    if (remaining != 0) {
        var to_eq = null;
        var min = null;
        var max = null;
        var min_value = 9999;
        var max_value = 0;

        console.log(remaining);

        d3.selectAll('#rangebox .range').each(function () {
            var id = d3.select(this).attr('data-id');

            if (id != moving_id) {
                if (parseInt(this.value) > parseInt(max_value)) {
                    max_value = this.value;
                    max = this;
                }
                if (parseInt(this.value) < parseInt(min_value)) {
                    min_value = this.value;
                    min = this;
                }
            }
        });

        if (remaining > 0) to_eq = min;
        else to_eq = max;

        if (to_eq) {
            if (remaining > 0) {
                to_eq.value = parseInt(to_eq.value) + 1;
                remaining = remaining - 1;
            } else {
                to_eq.value = parseInt(to_eq.value) - 1;
                remaining = remaining + 1;
            }
            oldValue[d3.select(to_eq).attr('data-id')] = to_eq.value;

            if (remaining != 0) equalize();
        }
    }
}

// show slider value
function showValues() {
    d3.selectAll('#rangebox .range').each(function () {
        var perct = this.value + '%';
        d3.select(this.parentNode.nextSibling).html(perct);
    });
}

// draw pie chart
function pieChart() {
    var json = getData();

    d3.select("#pie svg").remove();

    // svg canvas
    var svg = d3.select("#pie")
        .append("svg:svg")
        .attr("width", radius * 2)
        .attr("height", radius * 2)
        .append("svg:g")
        .attr("transform", "translate(" + radius + "," + radius + ")");

    // slices
    var arcs = svg.selectAll("path").data(pie(getData()))

    // render the slices
    arcs.enter()
        .append('svg:path')
        .attr("fill", function (d, i) {
        return color(i);
    })
        .attr("d", arc)
        .each(function (d) {
        this._current = d;
    })
        .append('title')
        .text(function (d, i) {
        return json[i].value + '%';
    });

    // render the labels
    arcs.enter()
        .append("svg:text")
        .attr("transform", function (d) {
        return "translate(" + arc.centroid(d) + ")";
    })
        .attr("text-anchor", "middle")
        .text(function (d, i) {
        if (json[i].value > 1) return json[i].label;
        else return null;
    });
}

// update pie chart
function updatePieChart() {
    updateArcs();
    updateLabels();
}

// update the slices of the pie chart
function updateArcs() {
    var json = getData();

    d3.selectAll("#pie path title")
        .text(function (d, i) {
        return json[i].value + '%';
    });

    d3.selectAll("#pie path")
        .data(pie(json))
        .transition()
        .duration(700)
        .attrTween('d', arcTween);
}

// update the labels of the pie chart
function updateLabels() {
    d3.selectAll("#pie text")
        .data(pie(getData()))
        .transition()
        .duration(700)
        .attr("transform", function (d) {
        return "translate(" + arc.centroid(d) + ")";
    })
        .text(function (d, i) {
        if (getData()[i].value > 0) return getData()[i].label;
        else return null;
    });
}

// transition for the arcs
function arcTween(a) {
    var i = d3.interpolate(this._current, a);
    this._current = i(0);
    return function (t) {
        return arc(i(t));
    }
};})(jQuery);
</script>
#}
{% endblock %}

