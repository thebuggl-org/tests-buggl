<?php

namespace Buggl\MainBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

use Buggl\MainBundle\Entity\MessageThread;

/**
 * MessageThreadRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MessageThreadRepository extends EntityRepository
{
	
	// check this
	public function findAllMessagesForUser( $user, $status = null, $limit=0, $offset=0 )
	{
		$qb = $this->createQueryBuilder('messageThread');
		
		$qb->select('messageThread');
		$qb->leftJoin('messageThread.sender', 'sender');
		$qb->leftJoin('messageThread.recipient', 'recipient');
		
		if(!is_null($status)){
			$qb->where("(sender.id = :senderId OR recipient.id = :recipientId) AND messageThread.status = :status");
			$qb->setParameter('senderId',$user->getId());
			$qb->setParameter('recipientId',$user->getId());
			$qb->setParameter('status',$status);
		}
		else{
			$qb->where("sender.id = :senderId OR recipient.id = :recipientId");
			$qb->setParameter('senderId',$user->getId());
			$qb->setParameter('recipientId',$user->getId());
		}
		
		if($limit > 0){	
			$qb->orderBy("localReference.dateUpdated","DESC");
			$qb->addOrderBy("localReference.referenceEmail","ASC");
			$qb->setFirstResult($offset);
			$qb->setMaxResults($limit);
		}
		
		$paginator = new Paginator($qb->getQuery(), true);
		
		return $paginator;
	}
		
	// check this
	public function findThreadForUsers($user1, $user2, $status = 1, $returnNewIfNull = false)
	{
		$qb = $this->createQueryBuilder('messageThread');
		
		$qb->select('messageThread');
		$qb->leftJoin('messageThread.sender', 'sender');
		$qb->leftJoin('sender.recipient', 'recipient');
		
		$qb->where("messageThread.status = :status AND ((sender.id = :user1Id AND recipient.id = :user2Id) OR (sender.id = :user2Id AND recipient.id = :user1Id))");
		$qb->setParameter('user1Id',$user1->getId());
		$qb->setParameter('user2Id',$user2->getId());
		$qb->setParameter('status',$status);
		
		try{
			$thread = $qb->getQuery()->getSingleResult();
		}catch(\Doctrine\ORM\NoResultException $e) {
			$thread =  $returnNewIfNull ? new MessageThread() : null;
		}
		
		return $thread;
	}
		public function getMessagesOfThread($messagethread)
	{
		$qb = $this->createQueryBuilder('messageThread');
		
		$qb->select('messageThread');
		$qb->where("messageThread.id = :id");
		$qb->setParameter('id',$messagethread);
		
		return $qb->getQuery()->getSingleResult();		
	}
}